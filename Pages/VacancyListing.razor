@page "/listagem-vagas"
@attribute [AllowAnonymous]
@inject Data.ApplicationServices service
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@inject IF_VagasAuthenticationStateProvider IF_VagasAuthenticationStateProvider



<div class="listingContainer">
    <div class="listingContent">
    @if(loading){
        <div class="loading">
            <span class="loader"></span>
        </div>
    }else{

    @if(vacancies.Count > 0){

        <div class="vacancyList">
            @foreach(var vacancy in vacancies){
                <div class="vacancyItem">
                    

                    <div class="header">
                        <div class="header-title">@vacancy.Title</div>
                        <button class="btn btn-info" >
                            <a href="@vacancy.externalLinkToApply" target="_blank">Candidatar</a>
                            </button>
                    </div>

                    <div class="infos">
                        <div class = "infos-item">@vacancy.Company</div>
                        <div class = "infos-item">@vacancy.Location</div>
                    </div>

                    <div class="description">
                        @vacancy.Description
                    </div>

                    <div class="footer">
                        <div>
                            vaga postada em @vacancy.CreatedAt
                        </div>
                        <div>
                            <button class="btn-sm btn-info" @onclick="(()=>RedirecionarDetalhe(vacancy))">ver detalhes</button>
                            @if(IF_VagasAuthenticationStateProvider.CurrentUser.Id == vacancy.UserId ||
                            IF_VagasAuthenticationStateProvider.CurrentUser.IsAdmin == true)
                            {
                                <button class="btn-sm btn-danger" @onclick="(()=>DeleteVacancy(vacancy))">deletar</button>
                            }
                        </div>
                    </div>

                </div>
            }
        </div>
        

    }else{

        <div class = "noResults">
            <h1>Nenhuma vaga cadastrada</h1>
            <button type="button" class="btn btn-primary" @onclick="(()=>RedirecionarCadastro())">Cadastrar vaga</button>
        </div>

    }

    }
    </div>
</div>




@code{

    public List<Data.Vacancy> vacancies = new List<Data.Vacancy>();
    public bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        await GetVacancies();
    }

    private async Task GetVacancies()
    {
        loading = true;
        vacancies = await service.GetVacanciesAsync();
        vacancies.Reverse();
        loading = false;
    }

    public async Task DeleteVacancy(Data.Vacancy vacancy){
         bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir esta vaga?");
        if (confirmed)
        {
            await service.DeleteVacancyAsync(vacancy);
            await GetVacancies();
        }
    }

    public void RedirecionarCadastro(){

        if(IF_VagasAuthenticationStateProvider.CurrentUser.Id == 0 || IF_VagasAuthenticationStateProvider.CurrentUser.Id == null)
        {
            NavManager.NavigateTo("/login");
        }else
        {
            NavManager.NavigateTo("/cadastro-vaga");
        }

    }

    public void RedirecionarDetalhe(Data.Vacancy vacancy)
    {
        NavManager.NavigateTo("/vagas/" + vacancy.Id.ToString());
    }


}