@page "/projects"

@inject ApplicationServices service
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@inject StateContainer stateContainer

<h1>Projects From @user.Name</h1>

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>URL</th>
                </tr>
            </thead>
            <tbody>
                @if (UserProjects.Any())
                {
                    @foreach (var project in UserProjects)
                    {
                        <tr>
                            <td>@project.Id</td>
                            <td>@project.Name</td>
                            <td>@project.Description</td>
                            <td>@project.WebsiteURL</td>

                            <td>
                                <button class="btn btn-secondary" @onclick="(()=>NavigateToEdit(project))">Edit</button>
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="(()=>DeleteProject(project))">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>@user.Name has no projects yet</strong></td></tr>
                }
            </tbody>
        </table>

        @if(showMessage)
        {
            <p style="color: red;">@DeletedProjectName was deleted successfully</p>
        }
        <button class="btn btn-primary" @onclick="(()=>NavigateToNewProject())">Add New Project</button>
        <NavLink href="/users">List All Users</NavLink>
    </div>
</div>

@code {

    List<Project> UserProjects = new List<Project>();
    User user { get; set; } = new ();
    bool showMessage = false;
    string? DeletedProjectName;
    protected override async Task OnInitializedAsync()
    {
        await UpdateProjects();
    }

    private async Task UpdateProjects()
    {
        UserProjects = await service.GetProjectsFromUserAsync(user);
    }

    private async Task DeleteProject(Project proj)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            showMessage = true;
            DeletedProjectName = proj.Name;
            await service.DeleteProjectAsync(proj);
            await UpdateProjects();
        }
        else
            showMessage = false;
    }

    private void NavigateToEdit(Project proj) {
        stateContainer.SetUser(user);
        stateContainer.SetProject(proj);
        navigationManager.NavigateTo("/new-project");
    }
    private void NavigateToNewProject() {
        stateContainer.SetUser(user);
        navigationManager.NavigateTo("/new-project");
    }
    protected override void OnInitialized(){
        if (stateContainer.user is not null){
            user = stateContainer.user;
        }
    }
}